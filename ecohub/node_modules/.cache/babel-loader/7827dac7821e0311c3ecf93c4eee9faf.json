{"ast":null,"code":"'use strict';\n\nvar nanoid = require('nanoid').nanoid;\n\n/**\n * Construct a new mapbox event client to send interaction events to the mapbox event service\n * @param {Object} options options with which to create the service\n * @param {String} options.accessToken the mapbox access token to make requests\n * @param {Number} [options.flushInterval=1000] the number of ms after which to flush the event queue\n * @param {Number} [options.maxQueueSize=100] the number of events to queue before flushing\n * @private\n */\nfunction MapboxEventManager(options) {\n  this.origin = options.origin || 'https://api.mapbox.com';\n  this.endpoint = 'events/v2';\n  this.access_token = options.accessToken;\n  this.version = '0.3.0';\n  this.pluginSessionID = this.generateSessionID();\n  this.sessionIncrementer = 0;\n  this.userAgent = this.getUserAgent();\n  this.options = options;\n  this.send = this.send.bind(this);\n\n  // parse global options to be sent with each request\n  this.countries = options.countries ? options.countries.split(\",\") : null;\n  this.types = options.types ? options.types.split(\",\") : null;\n  this.bbox = options.bbox ? options.bbox : null;\n  this.language = options.language ? options.language.split(\",\") : null;\n  this.limit = options.limit ? +options.limit : null;\n  this.locale = navigator.language || null;\n  this.enableEventLogging = this.shouldEnableLogging(options);\n  this.eventQueue = new Array();\n  this.flushInterval = options.flushInterval || 1000;\n  this.maxQueueSize = options.maxQueueSize || 100;\n  this.timer = this.flushInterval ? setTimeout(this.flush.bind(this), this.flushInterval) : null;\n  // keep some state to deduplicate requests if necessary\n  this.lastSentInput = \"\";\n  this.lastSentIndex = 0;\n}\nMapboxEventManager.prototype = {\n  /**\n     * Send a search.select event to the mapbox events service\n     * This event marks the array index of the item selected by the user out of the array of possible options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  select: function (selected, geocoder) {\n    var payload = this.getEventPayload('search.select', geocoder, {\n      selectedFeature: selected\n    });\n    if (!payload) return; // reject malformed event\n    if (payload.resultIndex === this.lastSentIndex && payload.queryString === this.lastSentInput || payload.resultIndex == -1) {\n      // don't log duplicate events if the user re-selected the same feature on the same search\n      return;\n    }\n    this.lastSentIndex = payload.resultIndex;\n    this.lastSentInput = payload.queryString;\n    return this.push(payload);\n  },\n  /**\n     * Send a search-start event to the mapbox events service\n     * This turnstile event marks when a user starts a new search\n     * @private\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  start: function (geocoder) {\n    var payload = this.getEventPayload('search.start', geocoder);\n    if (!payload) return; // reject malformed event\n    return this.push(payload);\n  },\n  /**\n   * Send a search-keyevent event to the mapbox events service\n   * This event records each keypress in sequence\n   * @private\n   * @param {Object} keyEvent the keydown event to log\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * \n   */\n  keyevent: function (keyEvent, geocoder) {\n    //pass invalid event\n    if (!keyEvent.key) return;\n    // don't send events for keys that don't change the input\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if (keyEvent.metaKey || [9, 27, 37, 39, 13, 38, 40].indexOf(keyEvent.keyCode) !== -1) return;\n    var payload = this.getEventPayload('search.keystroke', geocoder, {\n      key: keyEvent.key\n    });\n    if (!payload) return; // reject malformed event\n    return this.push(payload);\n  },\n  /**\n   * Send an event to the events service\n   *\n   * The event is skipped if the instance is not enabled to send logging events\n   *\n   * @private\n   * @param {Object} payload the http POST body of the event\n   * @param {Function} [callback] a callback function to invoke when the send has completed\n   * @returns {Promise}\n   */\n  send: function (payload, callback) {\n    if (!this.enableEventLogging) {\n      if (callback) return callback();\n      return;\n    }\n    var options = this.getRequestOptions(payload);\n    this.request(options, function (err) {\n      if (err) return this.handleError(err, callback);\n      if (callback) {\n        return callback();\n      }\n    }.bind(this));\n  },\n  /**\n   * Get http request options\n   * @private\n   * @param {*} payload\n   */\n  getRequestOptions: function (payload) {\n    if (!Array.isArray(payload)) payload = [payload];\n    var options = {\n      // events must be sent with POST\n      method: \"POST\",\n      host: this.origin,\n      path: this.endpoint + \"?access_token=\" + this.access_token,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload) //events are arrays\n    };\n    return options;\n  },\n  /**\n   * Get the event payload to send to the events service\n   * Most payload properties are shared across all events\n   * @private\n   * @param {String} event the name of the event to send to the events service. Valid options are 'search.start', 'search.select', 'search.feedback'.\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * @param {Object} eventArgs Additional arguments needed for certain event types\n   * @param {Object} eventArgs.key The key pressed by the user\n   * @param {Object} eventArgs.selectedFeature GeoJSON Feature selected by the user\n   * @returns {Object} an event payload\n   */\n  getEventPayload: function (event, geocoder, eventArgs = {}) {\n    // Make sure required arguments are present for certain event types\n    if (event === 'search.select' && !eventArgs.selectedFeature || event === 'search.keystroke' && !eventArgs.key) {\n      return null;\n    }\n\n    // Handle proximity, whether null, lat/lng coordinate object, or 'ip'\n    var proximity;\n    if (!geocoder.options.proximity) {\n      proximity = null;\n    } else if (typeof geocoder.options.proximity === 'object') {\n      proximity = [geocoder.options.proximity.longitude, geocoder.options.proximity.latitude];\n    } else if (geocoder.options.proximity === 'ip') {\n      var ipProximityHeader = geocoder._headers ? geocoder._headers['ip-proximity'] : null;\n      if (ipProximityHeader && typeof ipProximityHeader === 'string') {\n        proximity = ipProximityHeader.split(',').map(parseFloat);\n      } else {\n        proximity = [999, 999]; // Alias for 'ip' in event logs\n      }\n    } else {\n      proximity = geocoder.options.proximity;\n    }\n    var zoom = geocoder._map ? geocoder._map.getZoom() : undefined;\n    var payload = {\n      event: event,\n      version: this.getEventSchemaVersion(event),\n      created: +new Date(),\n      sessionIdentifier: this.getSessionId(),\n      country: this.countries,\n      userAgent: this.userAgent,\n      language: this.language,\n      bbox: this.bbox,\n      types: this.types,\n      endpoint: 'mapbox.places',\n      autocomplete: geocoder.options.autocomplete,\n      fuzzyMatch: geocoder.options.fuzzyMatch,\n      proximity: proximity,\n      limit: geocoder.options.limit,\n      routing: geocoder.options.routing,\n      worldview: geocoder.options.worldview,\n      mapZoom: zoom,\n      keyboardLocale: this.locale\n    };\n\n    // get the text in the search bar\n    if (event === \"search.select\") {\n      payload.queryString = geocoder.inputString;\n    } else if (event != \"search.select\" && geocoder._inputEl) {\n      payload.queryString = geocoder._inputEl.value;\n    } else {\n      payload.queryString = geocoder.inputString;\n    }\n\n    // add additional properties for certain event types\n    if (['search.keystroke', 'search.select'].includes(event)) {\n      payload.path = 'geocoding/v5/mapbox.places';\n    }\n    if (event === 'search.keystroke' && eventArgs.key) {\n      payload.lastAction = eventArgs.key;\n    } else if (event === 'search.select' && eventArgs.selectedFeature) {\n      var selected = eventArgs.selectedFeature;\n      var resultIndex = this.getSelectedIndex(selected, geocoder);\n      payload.resultIndex = resultIndex;\n      payload.resultPlaceName = selected.place_name;\n      payload.resultId = selected.id;\n      if (selected.properties) {\n        payload.resultMapboxId = selected.properties.mapbox_id;\n      }\n      if (geocoder._typeahead) {\n        var results = geocoder._typeahead.data;\n        if (results && results.length > 0) {\n          payload.suggestionIds = this.getSuggestionIds(results);\n          payload.suggestionNames = this.getSuggestionNames(results);\n          payload.suggestionTypes = this.getSuggestionTypes(results);\n          payload.suggestionSources = this.getSuggestionSources(results);\n        }\n      }\n    }\n\n    // Finally, validate that required properties are present for API compatibility\n    if (!this.validatePayload(payload)) {\n      return null;\n    }\n    return payload;\n  },\n  /**\n   * Wraps the request function for easier testing\n   * Make an http request and invoke a callback\n   * @private\n   * @param {Object} opts options describing the http request to be made\n   * @param {Function} callback the callback to invoke when the http request is completed\n   */\n  request: function (opts, callback) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.status == 204) {\n          //success\n          return callback(null);\n        } else {\n          return callback(this.statusText);\n        }\n      }\n    };\n    xhttp.open(opts.method, opts.host + '/' + opts.path, true);\n    for (var header in opts.headers) {\n      var headerValue = opts.headers[header];\n      xhttp.setRequestHeader(header, headerValue);\n    }\n    xhttp.send(opts.body);\n  },\n  /**\n   * Handle an error that occurred while making a request\n   * @param {Object} err an error instance to log\n   * @private\n   */\n  handleError: function (err, callback) {\n    if (callback) return callback(err);\n  },\n  /**\n   * Generate a session ID to be returned with all of the searches made by this geocoder instance\n   * ID is random and cannot be tracked across sessions\n   * @private\n   */\n  generateSessionID: function () {\n    return nanoid();\n  },\n  /**\n   * Get the a unique session ID for the current plugin session and increment the session counter.\n   *\n   * @returns {String} The session ID\n   */\n  getSessionId: function () {\n    return this.pluginSessionID + '.' + this.sessionIncrementer;\n  },\n  /**\n   * Get a user agent string to send with the request to the events service\n   * @private\n   */\n  getUserAgent: function () {\n    return 'mapbox-gl-geocoder.' + this.version + \".\" + navigator.userAgent;\n  },\n  /**\n     * Get the 0-based numeric index of the item that the user selected out of the list of options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a Mapbox-GL-Geocoder instance\n     * @returns {Number} the index of the selected result\n     */\n  getSelectedIndex: function (selected, geocoder) {\n    if (!geocoder._typeahead) return;\n    var results = geocoder._typeahead.data;\n    var selectedID = selected.id;\n    var resultIDs = results.map(function (feature) {\n      return feature.id;\n    });\n    var selectedIdx = resultIDs.indexOf(selectedID);\n    return selectedIdx;\n  },\n  getSuggestionIds: function (results) {\n    return results.map(function (feature) {\n      if (feature.properties) {\n        return feature.properties.mapbox_id || '';\n      }\n      return feature.id || '';\n    });\n  },\n  getSuggestionNames: function (results) {\n    return results.map(function (feature) {\n      return feature.place_name || '';\n    });\n  },\n  getSuggestionTypes: function (results) {\n    return results.map(function (feature) {\n      if (feature.place_type && Array.isArray(feature.place_type)) {\n        return feature.place_type[0] || '';\n      }\n      return '';\n    });\n  },\n  getSuggestionSources: function (results) {\n    return results.map(function (feature) {\n      return feature._source || '';\n    });\n  },\n  /**\n   * Get the correct schema version for the event\n   * @private\n   * @param {String} event Name of the event\n   * @returns \n   */\n  getEventSchemaVersion: function (event) {\n    if (['search.keystroke', 'search.select'].includes(event)) {\n      return '2.2';\n    } else {\n      return '2.0';\n    }\n  },\n  /**\n   * Checks if a payload has all the required properties for the event type\n   * @private\n   * @param {Object} payload \n   * @returns \n   */\n  validatePayload: function (payload) {\n    if (!payload || !payload.event) return false;\n    var searchStartRequiredProps = ['event', 'created', 'sessionIdentifier', 'queryString'];\n    var searchKeystrokeRequiredProps = ['event', 'created', 'sessionIdentifier', 'queryString', 'lastAction'];\n    var searchSelectRequiredProps = ['event', 'created', 'sessionIdentifier', 'queryString', 'resultIndex', 'path', 'suggestionIds'];\n    var event = payload.event;\n    if (event === 'search.start') {\n      return this.objectHasRequiredProps(payload, searchStartRequiredProps);\n    } else if (event === 'search.keystroke') {\n      return this.objectHasRequiredProps(payload, searchKeystrokeRequiredProps);\n    } else if (event === 'search.select') {\n      return this.objectHasRequiredProps(payload, searchSelectRequiredProps);\n    }\n    return true;\n  },\n  /**\n   * Checks of an object has all the required properties\n   * @private\n   * @param {Object} obj \n   * @param {Array<String>} requiredProps \n   * @returns \n   */\n  objectHasRequiredProps: function (obj, requiredProps) {\n    return requiredProps.every(function (prop) {\n      if (prop === 'queryString') {\n        return typeof obj[prop] === 'string' && obj[prop].length > 0;\n      }\n      return obj[prop] !== undefined;\n    });\n  },\n  /**\n     * Check whether events should be logged\n     * Clients using a localGeocoder or an origin other than mapbox should not have events logged\n     * @private\n     */\n  shouldEnableLogging: function (options) {\n    if (options.enableEventLogging === false) return false;\n    if (options.origin && options.origin !== 'https://api.mapbox.com') return false;\n    return true;\n  },\n  /**\n   * Flush out the event queue by sending events to the events service\n   * @private\n   */\n  flush: function () {\n    if (this.eventQueue.length > 0) {\n      this.send(this.eventQueue);\n      this.eventQueue = new Array();\n    }\n    // //reset the timer\n    if (this.timer) clearTimeout(this.timer);\n    if (this.flushInterval) this.timer = setTimeout(this.flush.bind(this), this.flushInterval);\n  },\n  /**\n   * Push event into the pending queue\n   * @param {Object} evt the event to send to the events service\n   * @param {Boolean} forceFlush indicates that the event queue should be flushed after adding this event regardless of size of the queue\n   * @private\n   */\n  push: function (evt, forceFlush) {\n    this.eventQueue.push(evt);\n    if (this.eventQueue.length >= this.maxQueueSize || forceFlush) {\n      this.flush();\n    }\n  },\n  /**\n   * Flush any remaining events from the queue before it is removed\n   * @private\n   */\n  remove: function () {\n    this.flush();\n  }\n};\nmodule.exports = MapboxEventManager;","map":null,"metadata":{},"sourceType":"script"}