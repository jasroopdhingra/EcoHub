{"ast":null,"code":"/**\n * This function transforms the feature from reverse geocoding to plain text with specified accuracy\n * @param {object} feature \n * @param {string} accuracy \n * @returns \n */\nfunction transformFeatureToGeolocationText(feature, accuracy) {\n  const addrInfo = getAddressInfo(feature);\n  const addressAccuracy = ['address', 'street', 'place', 'country'];\n  var currentAccuracy;\n  if (typeof accuracy === 'function') {\n    return accuracy(addrInfo);\n  }\n  const accuracyIndex = addressAccuracy.indexOf(accuracy);\n  if (accuracyIndex === -1) {\n    currentAccuracy = addressAccuracy;\n  } else {\n    currentAccuracy = addressAccuracy.slice(accuracyIndex);\n  }\n  return currentAccuracy.reduce(function (acc, name) {\n    if (!addrInfo[name]) {\n      return acc;\n    }\n    if (acc !== '') {\n      acc = acc + ', ';\n    }\n    return acc + addrInfo[name];\n  }, '');\n}\n/**\n * This function transforms the feature from reverse geocoding to AddressInfo object\n * @param {object} feature \n * @returns {object}\n */\nfunction getAddressInfo(feature) {\n  const houseNumber = feature.address || '';\n  const street = feature.text || '';\n  const placeName = feature.place_name || '';\n  const address = placeName.split(',')[0];\n  const addrInfo = {\n    address: address,\n    houseNumber: houseNumber,\n    street: street,\n    placeName: placeName\n  };\n  feature.context.forEach(function (context) {\n    const layer = context.id.split('.')[0];\n    addrInfo[layer] = context.text;\n  });\n  return addrInfo;\n}\nconst REVERSE_GEOCODE_COORD_RGX = /^[ ]*(-?\\d{1,3}(\\.\\d{0,256})?)[, ]+(-?\\d{1,3}(\\.\\d{0,256})?)[ ]*$/;\nmodule.exports = {\n  transformFeatureToGeolocationText: transformFeatureToGeolocationText,\n  getAddressInfo: getAddressInfo,\n  REVERSE_GEOCODE_COORD_RGX: REVERSE_GEOCODE_COORD_RGX\n};","map":null,"metadata":{},"sourceType":"script"}