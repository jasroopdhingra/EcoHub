{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethgarson/Documents/github/EcoHub/ecohub/src/pages/Map.jsx\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport Navbar from \"../components/Navbar.jsx\";\nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport styles from \"../styles/Map.module.css\";\nfunction Map() {\n  const mapRef = useRef(null);\n  const mapContainerRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  useEffect(() => {\n    // Initialize the map with high-quality detailed tiles from OpenStreetMap (OSM)\n    mapRef.current = new maplibregl.Map({\n      container: mapContainerRef.current,\n      // HTML container reference\n      style: 'https://api.maptiler.com/maps/basic-v2/?key=ZufIDItILVQkUb143XDJ#15.0/42.33506/-71.15609',\n      // Use a detailed MapTiler style\n      center: [-71.2057, 42.3601],\n      // Coordinates for Boston College\n      zoom: 14 // Adjust zoom level to get a good view of the area\n    });\n\n    // Cleanup the map when the component unmounts\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n      }\n    };\n  }, []);\n  const handleSearch = () => {\n    // Use MapTiler geocoding API for search functionality\n    if (searchQuery.trim()) {\n      fetch(`https://api.maptiler.com/geocoding/${searchQuery}.json?key=ZufIDItILVQkUb143XDJ#15.0/42.33506/-71.15609`).then(response => response.json()).then(data => {\n        const location = data.features[0].geometry.coordinates;\n        mapRef.current.flyTo({\n          center: location,\n          zoom: 14 // Zoom in on the search result\n        });\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles['search-bar'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search location\",\n    value: searchQuery,\n    onChange: e => setSearchQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapContainerRef,\n    className: styles['map-container'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }));\n}\nexport default Map;","map":{"version":3,"names":["React","useRef","useEffect","useState","Navbar","maplibregl","styles","Map","mapRef","mapContainerRef","searchQuery","setSearchQuery","current","container","style","center","zoom","remove","handleSearch","trim","fetch","then","response","json","data","location","features","geometry","coordinates","flyTo","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","ref"],"sources":["/Users/elizabethgarson/Documents/github/EcoHub/ecohub/src/pages/Map.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport Navbar from \"../components/Navbar.jsx\"; \nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport styles from \"../styles/Map.module.css\";\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const mapContainerRef = useRef(null);\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    // Initialize the map with high-quality detailed tiles from OpenStreetMap (OSM)\n    mapRef.current = new maplibregl.Map({\n      container: mapContainerRef.current, // HTML container reference\n      style: 'https://api.maptiler.com/maps/basic-v2/?key=ZufIDItILVQkUb143XDJ#15.0/42.33506/-71.15609', // Use a detailed MapTiler style\n      center: [-71.2057, 42.3601], // Coordinates for Boston College\n      zoom: 14 // Adjust zoom level to get a good view of the area\n    });\n\n    // Cleanup the map when the component unmounts\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n      }\n    };\n  }, []);\n\n  const handleSearch = () => {\n    // Use MapTiler geocoding API for search functionality\n    if (searchQuery.trim()) {\n      fetch(`https://api.maptiler.com/geocoding/${searchQuery}.json?key=ZufIDItILVQkUb143XDJ#15.0/42.33506/-71.15609`)\n        .then(response => response.json())\n        .then(data => {\n          const location = data.features[0].geometry.coordinates;\n          mapRef.current.flyTo({\n            center: location,\n            zoom: 14, // Zoom in on the search result\n          });\n        });\n    }\n  };\n\n  return (\n    <main>\n      <Navbar />\n      <div className={styles['search-bar']}>\n        <input\n          type=\"text\"\n          placeholder=\"Search location\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.target.value)}\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n      <div ref={mapContainerRef} className={styles['map-container']} />\n    </main>\n  );\n}\n\nexport default Map;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,kCAAkC;AACzC,OAAOC,MAAM,MAAM,0BAA0B;AAE7C,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMQ,eAAe,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEpC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd;IACAM,MAAM,CAACI,OAAO,GAAG,IAAIP,UAAU,CAACE,GAAG,CAAC;MAClCM,SAAS,EAAEJ,eAAe,CAACG,OAAO;MAAE;MACpCE,KAAK,EAAE,0FAA0F;MAAE;MACnGC,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC;MAAE;MAC7BC,IAAI,EAAE,EAAE,CAAC;IACX,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIR,MAAM,CAACI,OAAO,EAAE;QAClBJ,MAAM,CAACI,OAAO,CAACK,MAAM,CAAC,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,IAAIR,WAAW,CAACS,IAAI,CAAC,CAAC,EAAE;MACtBC,KAAK,CAAC,sCAAsCV,WAAW,wDAAwD,CAAC,CAC7GW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZ,MAAMC,QAAQ,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,WAAW;QACtDpB,MAAM,CAACI,OAAO,CAACiB,KAAK,CAAC;UACnBd,MAAM,EAAEU,QAAQ;UAChBT,IAAI,EAAE,EAAE,CAAE;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACEhB,KAAA,CAAA8B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpC,KAAA,CAAA8B,aAAA,CAAC1B,MAAM;IAAA2B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACVpC,KAAA,CAAA8B,aAAA;IAAKO,SAAS,EAAE/B,MAAM,CAAC,YAAY,CAAE;IAAAyB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnCpC,KAAA,CAAA8B,aAAA;IACEQ,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,iBAAiB;IAC7BC,KAAK,EAAE9B,WAAY;IACnB+B,QAAQ,EAAEC,CAAC,IAAI/B,cAAc,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC/C,CAAC,eACFpC,KAAA,CAAA8B,aAAA;IAAQc,OAAO,EAAE1B,YAAa;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAAc,CAC1C,CAAC,eACNpC,KAAA,CAAA8B,aAAA;IAAKe,GAAG,EAAEpC,eAAgB;IAAC4B,SAAS,EAAE/B,MAAM,CAAC,eAAe,CAAE;IAAAyB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAC5D,CAAC;AAEX;AAEA,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}